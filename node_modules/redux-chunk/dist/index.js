'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.reducer = exports.query = exports.middleware = exports.destroy = exports.put = exports.patch = exports.post = exports.get = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _httpMethods = require('./httpMethods');

Object.defineProperty(exports, 'get', {
    enumerable: true,
    get: function get() {
        return _httpMethods.get;
    }
});
Object.defineProperty(exports, 'post', {
    enumerable: true,
    get: function get() {
        return _httpMethods.post;
    }
});
Object.defineProperty(exports, 'patch', {
    enumerable: true,
    get: function get() {
        return _httpMethods.patch;
    }
});
Object.defineProperty(exports, 'put', {
    enumerable: true,
    get: function get() {
        return _httpMethods.put;
    }
});
Object.defineProperty(exports, 'destroy', {
    enumerable: true,
    get: function get() {
        return _httpMethods.destroy;
    }
});

var _middleware = require('./middleware');

Object.defineProperty(exports, 'middleware', {
    enumerable: true,
    get: function get() {
        return _interopRequireDefault(_middleware).default;
    }
});

var _query = require('./query');

Object.defineProperty(exports, 'query', {
    enumerable: true,
    get: function get() {
        return _interopRequireDefault(_query).default;
    }
});

var _reducer = require('./reducer');

Object.defineProperty(exports, 'reducer', {
    enumerable: true,
    get: function get() {
        return _interopRequireDefault(_reducer).default;
    }
});

var methods = _interopRequireWildcard(_httpMethods);

var _applyUrlWithPlaceholders = require('./applyUrlWithPlaceholders');

var _applyUrlWithPlaceholders2 = _interopRequireDefault(_applyUrlWithPlaceholders);

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaultConfigure = function defaultConfigure(options) {
    return options;
};
var defaultHandleResolve = function defaultHandleResolve(req, res) {
    return Promise.resolve(res);
};
var defaultHandleReject = function defaultHandleReject(req, err) {
    return Promise.reject(err);
};

var API = function () {
    function API(endpoints, config) {
        _classCallCheck(this, API);

        this.config = _extends({}, config, {
            configureOptions: config.configureOptions || defaultConfigure,
            configureHeaders: config.configureHeaders || defaultConfigure,
            handleResolve: config.handleResolve || defaultHandleResolve,
            handleReject: config.handleReject || defaultHandleReject
        });

        this.pendingPromises = {};

        this.addEndpoints(endpoints);
    }

    _createClass(API, [{
        key: 'createEndpoint',
        value: function createEndpoint(name, endpoint) {
            var _this = this;

            var path = endpoint.path,
                required = endpoint.required,
                methodConfig = endpoint.method,
                endpointBaseUrl = endpoint.baseUrl;

            // Create list of required placeholders

            var requiredPlaceholders = required || [];
            var placeholderRegexp = /:([^\/$]+)/g;
            var match = void 0;
            while (match = placeholderRegexp.exec(path)) {
                requiredPlaceholders.push(match[1]);
            }

            // Create direct function on the API class
            this[name] = function () {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                // Run the args through the method config
                args = methodConfig.apply(undefined, _toConsumableArray(args));

                var placeholders = args.placeholders || {};
                var options = args.options || {};

                var missingPlaceholders = requiredPlaceholders.filter(function (name) {
                    return !placeholders[name];
                });
                if (missingPlaceholders.length) {
                    console.error('The ' + name + ' API call cannot be performed. The following params were not specified: ' + missingPlaceholders.join(', '));

                    var neverEndingPromise = new Promise(function () {
                        return 1;
                    });
                    neverEndingPromise.noop = true;

                    return neverEndingPromise;
                }

                var promiseId = JSON.stringify([name, args]);
                if (_this.pendingPromises[promiseId]) {
                    return _this.pendingPromises[promiseId];
                }

                var createRequest = function createRequest() {
                    var augmentedOptions = _extends({}, options, {
                        headers: _this.config.configureHeaders(_extends({
                            'Content-Type': 'application/json',
                            Accept: 'application/json'
                        }, options.headers))
                    });

                    var opts = _this.config.configureOptions(augmentedOptions);
                    var reqPath = (0, _applyUrlWithPlaceholders2.default)(path, placeholders);
                    var baseUrl = _this.config.baseUrl;
                    if (endpointBaseUrl) {
                        baseUrl = endpointBaseUrl;
                    } else if (typeof baseUrl == 'function') {
                        baseUrl = baseUrl(path, placeholders);
                    }
                    var req = (0, _request2.default)(baseUrl, reqPath, opts);

                    req.placeholders = reqPath;
                    req.config = opts;
                    req.retry = function () {
                        return createRequest();
                    };

                    _this.pendingPromises[promiseId] = req;

                    var promise = req.then(function (res) {
                        return _this.config.handleResolve(req, res);
                    }).then(function (res) {
                        delete _this.pendingPromises[promiseId];
                        return res;
                    }).catch(function (err) {
                        delete _this.pendingPromises[promiseId];
                        return Promise.reject(err);
                    }).catch(function (err) {
                        return _this.config.handleReject(req, err);
                    });

                    promise.actionName = name;
                    promise.params = args;

                    return promise;
                };

                return createRequest();
            };

            this[name].actionName = name;

            return this;
        }
    }, {
        key: 'addEndpoints',
        value: function addEndpoints(endpoints) {
            var _this2 = this;

            Object.keys(endpoints).forEach(function (name) {
                _this2.createEndpoint(name, endpoints[name]);
            });
        }
    }]);

    return API;
}();

exports.default = API;