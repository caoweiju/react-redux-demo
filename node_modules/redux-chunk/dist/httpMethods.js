'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var allArgs = function allArgs(args) {
    return {
        placeholders: args.length >= 2 ? args[0] : {},
        body: args.length >= 2 ? args[1] : args[0],
        options: args.length == 3 ? args[2] : {}
    };
};

/**
 * GET HTTP Method
 * 
 * @param {Object} placeholders - The request placeholders and query strings
 * @param {Object} options - Optional options for this request
 */
var get = exports.get = function get() {
    var placeholders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return { placeholders: placeholders, options: options };
};

/**
 * POST HTTP Method
 * 
 * @param {*} args (body), (placeholders, body), (placeholders, body, options)
 */
var post = exports.post = function post() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    var _allArgs = allArgs(args),
        placeholders = _allArgs.placeholders,
        body = _allArgs.body,
        options = _allArgs.options;

    return {
        placeholders: placeholders,
        options: _extends({
            method: 'POST',
            body: body && JSON.stringify(body)
        }, options)
    };
};

/**
 * PATCH HTTP Method
 * 
 * @param {*} args (body), (placeholders, body), (placeholders, body, options)
 */
var patch = exports.patch = function patch() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
    }

    var _allArgs2 = allArgs(args),
        placeholders = _allArgs2.placeholders,
        body = _allArgs2.body,
        options = _allArgs2.options;

    return {
        placeholders: placeholders,
        options: _extends({
            method: 'PATCH',
            body: body && JSON.stringify(body)
        }, options)
    };
};

/**
 * PUT HTTP Method
 * 
 * @param {*} args (body), (placeholders, body), (placeholders, body, options)
 */
var put = exports.put = function put() {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
    }

    var _allArgs3 = allArgs(args),
        placeholders = _allArgs3.placeholders,
        body = _allArgs3.body,
        options = _allArgs3.options;

    return {
        placeholders: placeholders,
        options: _extends({
            method: 'PUT',
            mode: 'cors',
            body: body && JSON.stringify(body)
        }, options)
    };
};

/**
 * DELETE HTTP Method
 * 
 * @param {Object} placeholders - The request placeholders and query strings
 * @param {Object} options - Optional options for this request
 */
var destroy = exports.destroy = function destroy() {
    var placeholders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return { placeholders: placeholders, options: _extends({ method: 'DELETE' }, options) };
};